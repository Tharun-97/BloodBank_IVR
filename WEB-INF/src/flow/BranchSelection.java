package flow;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.util.ApiIntegration;
import org.util.ChoiceSelection;

import com.avaya.sce.runtime.Prompt;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * Class that represents a menu. A menu can contain prompts, choices and links
 * as well as handlers for various events that may occur while the menu is
 * executing Last generated by Orchestration Designer at: 2023-JAN-19 04:47:52
 * PM
 */
public class BranchSelection extends com.avaya.sce.runtime.Menu {
	List<String> branchlist = null;
	// {{START:CLASS:FIELDS
	// }}END:CLASS:FIELDS

	/**
	 * Default constructor Last generated by Orchestration Designer at: 2023-JAN-19
	 * 04:47:52 PM
	 */
	public BranchSelection() {
		// {{START:CLASS:CONSTRUCTOR
		super();
		setNeedsDefaultDisconnectHandler(false);
		// }}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the links for the node, override:
	 *     void updateLinks(Collection links, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-20  06:21:04 PM
	 * @return a collection of links
	 */
	public java.util.Collection getLinks(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Link link;
		java.util.List list;
		java.util.Collection grammarInfo = null;
		java.util.Collection<com.avaya.sce.runtime.CaptureExpression> captureExpr = null;
		// This item does not have any defined links
		list = new java.util.ArrayList();
		String ___tempGrammarName = null;

		return(list);
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the properties for the node, override:
	 *     void updateProperties(Collection properties, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-20  06:21:04 PM
	 * @return a collection of properties
	 */
	public java.util.Collection getProperties(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Property property;
		java.util.List list;
		// This item does not have any defined properties
		list = new java.util.ArrayList();

		return(list);
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the event handlers for the node, override:
	 *    void updateEvents(Collection events, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-20  06:21:04 PM
	 * @return a collection of Events
	 */
	public java.util.Collection getEvents(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list;
		com.avaya.sce.runtime.Event event;
		list = new java.util.ArrayList(2);
		java.util.List eventPromptNames = null;
		String ___tempPromptName = null;

		// build the list of prompt names
		eventPromptNames = new java.util.ArrayList(1);
		
		eventPromptNames.add(new com.avaya.sce.runtime.PromptRefInfo("NoInput", ""));

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOINPUT, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("NoInputBranch", 3, true, ""));
		list.add(event);

		// build the list of prompt names
		eventPromptNames = new java.util.ArrayList(1);
		
		eventPromptNames.add(new com.avaya.sce.runtime.PromptRefInfo("NoMatch", ""));

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOMATCH, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("NoMatchBranch", 3, true, ""));
		list.add(event);
		return(list);
	}

	/**
	 * Builds the list of choices for the menu.  This list is built
	 * automatically by the code generator and should not be edited
	 * manually.  Future code generation may overwrite any changes
	 * to this method.<br>
	 * To modify the list of choices, override:<br>
	 *    updateChoices(Collection choices, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2023-FEB-20  06:21:04 PM
	 */
	public java.util.Collection getChoices(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Choice choice = null;
		java.util.Collection grammarInfo = null;
		list = new java.util.ArrayList(1);
		String ___tempGrammarName = null;

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();


		choice = new com.avaya.sce.runtime.Choice("Exit", "0", true, "exact", "Thanks", grammarInfo, true);
		list.add(choice);

		return(list);
	}

	/**
	 * Builds the list of prompts that are used by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of prompts for the flow item, override:
	 *     updatePrompts(Collection prompts, SCESession mySession)
	 * @return list of prompts for the menu
	 * Last generated by Orchestration Designer at: 2023-FEB-20  06:21:04 PM
	 */
	public java.util.Collection getPrompts(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		String ___tempPromptName = null;
		// build the list of prompt names
		list = new java.util.ArrayList(1);
		
		list.add(new com.avaya.sce.runtime.PromptRefInfo("NorthZone", ""));

		return(list);
	}

	/**
	 * Builds the list of tracking items that are generated by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.
	 * @return list of tracking items for the item
	 * Last generated by Orchestration Designer at: 2023-FEB-20  06:21:04 PM
	 */
	public java.util.Collection getTrackingActions(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;

		// Item has no tracking items.
		list = new java.util.ArrayList();
		return(list);
	}

	@Override
	public void requestBegin(SCESession mySession) {
		
		
		try {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Entered Branch Selection Node", mySession);
			mySession.getVariableField(IProjectVariables.CALL__HISTORY, IProjectVariables.CALL__HISTORY_FIELD_EXITNODE).setValue("Branch Selection Node");
			
			branchlist=(ArrayList<String>) mySession.getVariableField(IProjectVariables.API_RESULTS, IProjectVariables.API_RESULTS_FIELD_BRANCH_LIST).getObjectValue();
		
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Branches List added:"+branchlist, mySession);
		
		} catch (Exception e) {
			System.out.println(e.getMessage());

		}

	}

	@Override
	public void updatePrompts(Collection prompts, SCESession mySession) {
		super.updatePrompts(prompts, mySession);
		try {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Update Branch prompt Start", mySession);
		Prompt p = new Prompt() {
			@Override
			public void buildPrompt() {
			}
		};
		p.setSession(mySession);
		p.setOrder(com.avaya.sce.runtime.Prompt.STANDARD);
		p.setTimeout(1, 8000);
		p.setBargin(1, true);
		com.avaya.sce.runtime.Format format = null;
		
		int PageNumber = mySession.getVariableField(IProjectVariables.PAGE_NUMBER,IProjectVariables.PAGE_NUMBER_FIELD_MENU_PAGE_NUMBER).getIntValue();

		int menupage = 0;
		
		ChoiceSelection c=new ChoiceSelection();
				
		
		if (branchlist.size() % 6 == 0) {
			menupage = branchlist.size() / 6;
		} else {
			menupage = (branchlist.size() / 6) + 1;
		}
		
		if (menupage == 1) {
		p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:BranchSelect",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
	
			
		for (int i = 0; i < branchlist.size(); i++) {
			
			String branch = branchlist.get(i).replace(" ", "");
			
			String dtmf = String.valueOf((i + 1));

			p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("DTMFaudio:Press"+dtmf+"",
					com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
			
			c.Choice(branch, dtmf, mySession, p);
			
		}
		p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Repeat",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
		
		}
		 else {
				if (PageNumber == 0) {
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:BranchSelect",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

					for (int i = 0; i < 6; i++) {

						String branch = branchlist.get(i).replace(" ", "");
						
						String dtmf = String.valueOf((i + 1));
						
						 p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("DTMFaudio:Press"+dtmf+"",
									com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
						
						 c.Choice(branch, dtmf, mySession, p);
						
						
					}
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Repeat",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
					
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Next",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

			
				} 
				else if (PageNumber == menupage - 1) {
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:BranchSelect",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

					for (int i = PageNumber * 6; i < branchlist.size(); i++) {
					
						String branch = branchlist.get(i).replace(" ", "");
						String dtmf = String.valueOf(i - ((PageNumber * 6) - 1));

						 p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("DTMFaudio:Press"+dtmf+"",
									com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
						 
						 c.Choice(branch, dtmf, mySession, p);
						 
					}
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Previous",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Repeat",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

				
				}
				
				else {
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:BranchSelect",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

					for (int i = PageNumber * 6; i < (PageNumber * 6) + 6; i++) {
						
						String branch = branchlist.get(i).replace(" ", "");
						
						String dtmf = String.valueOf(i - ((PageNumber * 6) - 1));
						
						 p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("DTMFaudio:Press"+dtmf+"",
									com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));
						
						c.Choice(branch, dtmf, mySession, p);
						
					}
				
					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Previous",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Repeat",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

					p.add(1, new com.avaya.sce.runtime.PhraseVariableElement("AudioURLs:Next",com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL, false));

				
				}
			
				
		 }prompts.add(p);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Update Branch prompt End", mySession);

	}	catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,e.getMessage(), mySession);

		}
		
	}

	@Override
	public void updateChoices(Collection choices, SCESession mySession) {
		try {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Update Branch choice End", mySession);
			super.updateChoices(choices, mySession);
			com.avaya.sce.runtime.Choice choice = null;
			java.util.Collection grammarInfo = null;
			grammarInfo = new java.util.ArrayList();
			
			
			int PageNumber = mySession.getVariableField(IProjectVariables.PAGE_NUMBER,
					IProjectVariables.PAGE_NUMBER_FIELD_MENU_PAGE_NUMBER).getIntValue();

			int menupage = 0;

			if (branchlist.size() % 6 == 0) {
				menupage = branchlist.size() / 6;
			} else {
				menupage = (branchlist.size() / 6) + 1;
			}

			if (menupage == 1) {
				String branch=null;
				for (int i = 0; i < branchlist.size(); i++) {

					branch = branchlist.get(i);
					String dtmf = String.valueOf(i + 1);

					choice = new com.avaya.sce.runtime.Choice(branch, dtmf, true, "exact", "BranchSelect", grammarInfo,
							true);

					choices.add(choice);
				}

				choice = new com.avaya.sce.runtime.Choice("Repeat", "8", true, "exact", "ChoiceProcessing",
						grammarInfo, true);
				choices.add(choice);

			} else {
				if (PageNumber == 0) {
					for (int i = 0; i < 6; i++) {

						String branch = branchlist.get(i);
						String dtmf = String.valueOf((i + 1));

						choice = new com.avaya.sce.runtime.Choice(branch, dtmf, true, "exact", "BranchSelect",
								grammarInfo, true);
						choices.add(choice);

					}
					
					choice = new com.avaya.sce.runtime.Choice("Repeat", "8", true, "exact", "ChoiceProcessing",
							grammarInfo, true);
					choices.add(choice);
					
					choice = new com.avaya.sce.runtime.Choice("NextMenuPage", "9", true, "exact", "ChoiceProcessing",
							grammarInfo, true);
					choices.add(choice);
				
				}
				else if (PageNumber == menupage - 1) {
					for (int i = PageNumber * 6; i < branchlist.size(); i++) {
						String branch = branchlist.get(i);
						String dtmf = String.valueOf(i - ((PageNumber * 6) - 1));

						choice = new com.avaya.sce.runtime.Choice(branch, dtmf, true, "exact", "BranchSelect",
								grammarInfo, true);
						choices.add(choice);
					}
					
					choice = new com.avaya.sce.runtime.Choice("PreviousMenuPage", "7", true, "exact",
							"ChoiceProcessing", grammarInfo, true);
					choices.add(choice);
					
					choice = new com.avaya.sce.runtime.Choice("Repeat", "8", true, "exact", "ChoiceProcessing",
							grammarInfo, true);
					choices.add(choice);
				} 
				else {
					for (int i = PageNumber * 6; i < (PageNumber * 6) + 6; i++) {
						String branch = branchlist.get(i);
						String dtmf = String.valueOf(i - ((PageNumber * 6) - 1));
						
						choice = new com.avaya.sce.runtime.Choice(branch, dtmf, true, "exact", "BranchSelect",
								grammarInfo, true);
						choices.add(choice);
					}
					
					choice = new com.avaya.sce.runtime.Choice("PreviousMenuPage", "7", true, "exact",
							"ChoiceProcessing", grammarInfo, true);
					choices.add(choice);
					
					choice = new com.avaya.sce.runtime.Choice("Repeat", "8", true, "exact", "ChoiceProcessing",
							grammarInfo, true);
					choices.add(choice);
					
					choice = new com.avaya.sce.runtime.Choice("NextMenuPage", "9", true, "exact", "ChoiceProcessing",
							grammarInfo, true);
					choices.add(choice);
				}
			}			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Update Chennai north choice  End", mySession);

	}
		catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,e, mySession);

		}
	}

}
